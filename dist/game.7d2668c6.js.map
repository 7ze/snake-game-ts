{"version":3,"sources":["ts/input.ts","ts/snake.ts","ts/grid.ts","ts/food.ts","ts/game.ts"],"names":[],"mappings":";;;;;;AIAA,AFAA,IEAA,AFAM,OEAN,EFAe,CEAf,EFAkB,EAAlB,GEAA,CAAA,SAAA,CAAA;ADAA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;ACOA,AFLA,IEKA,AFLM,MEKN,GAAA,AFLe,GAAG,IEKlB,CAAA,IFLM,IEKN,CAAA,IFLkB,CAAC,KAAD,EAAc;ACDhC,ADEE,ICFF,KDEU,ECFV,EDEc,CCFd,ADEe,KAAL,CAAW,CCFrB,CAAA,EDEyB,CAAC,MCF1B,ADEqB,CCFrB,IDEqC,IAA3B,IAAmC,KAApC,GAA6C,CAApD;AEKF,AFJC,CAFD,GEMA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;ADLA,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,GAAA;AAC5B,ACOF,AFLO,IEKH,AFLS,ECFP,YCOY,GDPhB,ACOmB,CAArB,AFL+B,GAAG,SAArB,kBAAqB,GAAA;AEMlC,AFLE,IEKE,KFLK,GEKG,GAAG,KAAf;ADPE,ACQF,AFNW,IEML,AFNK,CAAC,EAAE,ECFL,CAAC,GCQK,GAAmB,AFNX,CAAC,OEMkB,CDRjC,ACQkC,CFNpB,CAAd,ECFoB,OAAA,CAAA,CCQK,CAAuB,aAAvB,CAAlC,CDR6B,CAAc,eAAd,CAA3B,EAA2D;AACzD,ADCgC,ICDhC,ADCgC,CAAC,EAAE,SAAS,CAAC,ECD9B,GAAG,IDC0B,ECD1B,CAAA,kBAAA,EAAlB;AACD,ACQH,AFRS,GAAP,CEQI,IAAI,GAAG,SAAP,IAAO,CAAC,WAAD,EAAoB;AAC/B,AFRD,CAFM,KEUD,QAAJ,EAAc;ADRd,ACSE,QAAI,CDTC,MCSM,CAAC,QDTd,wBCSa,CAAX,EAA+C;ADRlD,ACSK,AFZO,CCHb,KCeM,CFZO,CAAA,IEYD,CAAC,QAAP,CAAgB,IAAhB,AFZO,GEYgB,AFZE,GEYzB,eFZO;AEaR;ADRL,ADDA,ICCI,IAAI,CDDQ,ECCL,WDDX,CAA8B,QAA9B,CCCgC,CDDgC,CCChE;AACA,ACQI,AFTF,AFXF,IGYM,AHZF,KEYA,QAAQ,CCAQ,ADAP,AFZK,CEYd,ECAmB,AHZF,CGYrB,ADAiB,CAAb,IACA,QAAQ,CAAC,CAAT,GAAa,SADb,IAEA,QAAQ,CAAC,CAAT,GAAa,CAFb,IAGA,QAAQ,CAAC,CAAT,GAAa,SAJf;AEUC,AFJF,AFjBsB,ACAvB,EDAuB,CAAC,CCAxB,CDA0B,CAAL,KCArB,GAAA,OAAA,CAAA,SAAA,CAAA;AEcO,AHdsB,EAAA,CAAC,CGcjB,CHdmB,KGcb,GAAG,SAAT,MAAS,GAAA;AACpB,ACQA,AFbF,AFVqB,ACER,CDFb,CIuBE,IDRI,CDLN,ADRa,CGqBL,AFbR,ADRa,CGqBJ,IDRH,CAAA,KFbO,ECQb,CDR2B,CAAd,CCQb,CDR8B,KGqB5B,CDRI,ACQyB,CDRX,GCQlB,CDRI,CAAJ,ADLF,ECK2B;AACvB,ACQF,IDRE,ECQI,KDRJ,CAAA,WAAA,CAAY,ICQc,GAAG,CAAC,MDR9B,KCQyC,GAAG,cAAf,IAAiC,IAAhE;ADPE,ACQF,AJxBF,ACGA,IEaI,AHhBA,ACGE,EGqBA,EDRE,GAAG,EFbI,GAAG,CAAC,KDHG,GAAA,GIwBM,GAAG,CDRC,CHhBV,CGgBlB,AHhBkB,CIwBa,CJxBb,EAAQ,IIwBK,CAAA,SJxBb,CAAtB,CIwBE,EAA8C;ADP7C,ACSD,AHvBmB,EGuBnB,AHvBmB,CAAC,EAAE,EAAL,SGuBH,GAAG,WAAjB;ADRD,ACUC,AJ1BF,ACC4B,CEUrB,CCeL,AHzB0B,CAAC,CDDvB,CCCyB,GGyBvB,GJ1BK,GAAG,SAAV,OAAU,CAAC,CAAD,EAAiB;AI2B/B,AJ1BA,ACAiB,CAAD,CG0BhB,AH1BF,IG0BM,IJ1BI,CAAC,CAAC,GAAV;AGUW,ACiBZ,AJ1BG,ACAJ,CGUA,GHVI,GESS,CAAA,CHTJ,KGSI,CFTE,EESI,CHTf,ACAc,CAAlB,IESa;AHRT,SAAK,GAAL;AGeG,ACYP,AJ1BI,ACAG,IEcM,AFdA,EG0BP,CAAC,CDZU,CHdR,CCAU,CEcC,CHdhB,CCAkB,OEcT,EFdA,EEcO,CAAC,GCYrB,AH1BsB,CG0BO,EH1BP,EG0BtB,CDZoB,EAA0B;AAC5C,AHdI,ACAJ,MEcM,IHdE,OGcS,GAAG,QAAQ,AHdF,CGcG,AHdF,CAAnB,KAAyB,CAA7B,EAAgC,IGchB,CAAuB,KAAvB,CAApB;AACA,ACYF,AJ1BM,ACAJ,EEcA,AFdA,EG0BI,EJ1BA,II0BM,GDZC,ACYE,AH1BF,CEcC,KAAZ,CAAkB,AHdA,EI0Bd,CJ1BiB,KI0BR,GAAA,CDZb,GAAiC,KAAG,IAAI,CAAC,CAAzC;AACA,ACYA,AJ3BuB,ACCvB,EEcA,ACYA,IH1BM,EDDiB,CI2BvB,AJ3BwB,CI2BxB,CJ3B0B,CAAL,CGeV,CAAC,ECYZ,GDZA,CAAkB,AFdE,GAAG,OAAA,CAAA,IEcvB,GAAoC,KAAG,IAAI,CAAC,AFdrB,CEcvB,CFdA;AEeA,ACYA,AJ5B6B,EGgB7B,ACYA,MAAA,AJ5B6B,CI4B7B,AJ5B8B,EAAE,CAAC,CGgBtB,CAAC,CCYZ,QDZA,CAAsB,GAAtB,CAA0B,MAA1B;AACA,ACYA,AJ7BqB,ACGrB,EEcA,ACYA,KJ7BI,ACGC,IEcI,AFdA,CEcC,ACYA,AH1BA,GAAG,QEcb,CAAsB,AFdA,CAAC,MAAV,GAAmB,CEchC,AFdA,EAAmC,CAAC,IAAI,CAAxC,EAA2C,CAAC,EAA5C,EAAgD;AEejD,ACYA,AJ7BK,ACGF,CEQG,ACcP,GHtBI,SAAS,CAAC,CAAC,GAAG,CAAL,CAAT,GAAgB,QAAA,CAAA,EAAA,EAAQ,SAAS,CAAC,CAAD,CAAjB,CAAhB;AACD;AEOU,ACoBb,AJ9BI,II8BE,GDpBO,CAAA,ACoBH,CJ9BD,EI8BI,CDpBA,GAAI,IAAJ,CCoBP,AJ9BF,II8BS,GAAA;AACX,AJ9BE,ACIF,EG0BA,AH1BA,ODJO,EI8BE,AH1BA,CG0BC,AJ9BR,ACIQ,CAAD,CAAT,CAAa,CAAb,IAAkB,CG0BlB,GAAsB,EAAtB,QH1BgC,CAAC,CAAjC;AG2BA,AJ9BE,ACIF,EG0BA,AH1BA,OG0BA,AJ9BO,CI8BP,CH1BS,CDJP,ACIQ,CAAD,CG0BT,AH1BA,CG0BU,AH1BG,CAAb,IAAkB,IG0BlB,UH1BgC,CAAC,CAAjC;AG2BA,AJ9BI,ACIL,CAXM,CGqCL,MAAA,CAAA,CJ9BQ,GI8BR,CAAS,SAAT,KJ9B0B,CAAC,CAAnB,KAAyB,CAA7B,EAAgC;AI+BrC,AJ9BK,CI0BN,KJ1BM,cAAc,GAAG;AAAE,ACRZ,OAAA,CDQY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","file":"game.7d2668c6.js","sourceRoot":"../src","sourcesContent":["let inputDirection = { x: 0, y: 0 };\nlet lastInputDirection = { ...inputDirection };\n\nconst handler = (e: KeyboardEvent) => {\n  switch (e.key) {\n    case 'ArrowUp':\n    case 'W':\n    case 'w':\n      if (lastInputDirection.y !== 0) break;\n      inputDirection = { x: 0, y: -1 };\n      break;\n    case 'ArrowDown':\n    case 'S':\n    case 's':\n      if (lastInputDirection.y !== 0) break;\n      inputDirection = { x: 0, y: 1 };\n      break;\n    case 'ArrowLeft':\n    case 'A':\n    case 'a':\n      if (lastInputDirection.x !== 0) break;\n      inputDirection = { x: -1, y: 0 };\n      break;\n    case 'ArrowRight':\n    case 'D':\n    case 'd':\n      if (lastInputDirection.x !== 0) break;\n      inputDirection = { x: 1, y: 0 };\n      break;\n  }\n};\n\nwindow.addEventListener('keydown', handler);\n\nexport const getInputDirection = () => {\n  lastInputDirection = inputDirection;\n  return inputDirection;\n};\n","import { getInputDirection } from './input';\n\nexport const SNAKE_SPEED = 5; // * Speed in fps *\n\nconst snakeBody = [{ x: 11, y: 11 }];\nlet newSegments = 0;\n\nexport const update = (): void => {\n  // logic to move the snake\n  addSegments();\n  const inputDirection = getInputDirection();\n\n  for (let i = snakeBody.length - 2; i >= 0; i--) {\n    snakeBody[i + 1] = { ...snakeBody[i] };\n  }\n\n  snakeBody[0].x += inputDirection.x;\n  snakeBody[0].y += inputDirection.y;\n};\n\nexport const draw = (gameBoard: HTMLDivElement): void => {\n  snakeBody.forEach((segment) => {\n    const snakeElement = document.createElement('div');\n    snakeElement.style.gridRowStart = `${segment.y}`;\n    snakeElement.style.gridColumnStart = `${segment.x}`;\n    snakeElement.classList.add('snake');\n    gameBoard.appendChild(snakeElement);\n  });\n};\n\nexport const snakeIsOnPosition = (\n  position: { x: number; y: number },\n  { ignoreHead = false } = {}\n) => {\n  return snakeBody.some((segment, index) => {\n    if (ignoreHead && !index) return false;\n    return equalsPosition(segment, position);\n  });\n};\n\nexport const isIntersected = () => {\n  return snakeIsOnPosition(getSnakeHead(), { ignoreHead: true });\n};\n\nexport const expandSnake = (growth: number) => {\n  newSegments += growth;\n};\n\nexport const getSnakeHead = () => {\n  return snakeBody[0];\n};\n\nconst equalsPosition = (\n  positionOne: { x: number; y: number },\n  positionTwo: { x: number; y: number }\n) => {\n  return positionOne.x === positionTwo.x && positionOne.y === positionTwo.y;\n};\n\nconst addSegments = () => {\n  for (let i = 0; i < newSegments; i++) {\n    snakeBody.push({ ...snakeBody[snakeBody.length - 1] });\n  }\n  newSegments = 0;\n};\n","const GRID_SIZE = 21;\n\nconst getRandom = (limit: number) => {\n  return (Math.floor(Math.random() * 1000) % limit) + 1;\n};\n\nexport const randomGridPosition = () => {\n  return { x: getRandom(GRID_SIZE), y: getRandom(GRID_SIZE) };\n};\n\nexport function isOutsideGrid(position: { x: number; y: number }): boolean {\n  return (\n    position.x < 1 ||\n    position.x > GRID_SIZE ||\n    position.y < 1 ||\n    position.y > GRID_SIZE\n  );\n}\n","import { randomGridPosition } from './grid';\nimport { expandSnake, snakeIsOnPosition as snakeIsOnFood } from './snake';\n\nconst getRandomFoodPosition = () => {\n  let newFoodPosition: { x: number; y: number };\n  while (!newFoodPosition || snakeIsOnFood(newFoodPosition)) {\n    newFoodPosition = randomGridPosition();\n  }\n  return newFoodPosition;\n};\n\nlet food = getRandomFoodPosition();\nconst EXPANSION_RATE = 1;\n\nexport const update = () => {\n  if (snakeIsOnFood(food)) {\n    expandSnake(EXPANSION_RATE);\n    food = getRandomFoodPosition();\n  }\n};\n\nexport const draw = (gameBoard: HTMLDivElement): void => {\n  const foodElement = document.createElement('div');\n  foodElement.style.gridRowStart = `${food.y}`;\n  foodElement.style.gridColumnStart = `${food.x}`;\n  foodElement.classList.add('food');\n  gameBoard.appendChild(foodElement);\n};\n","import {\n  SNAKE_SPEED,\n  update as updateSnake,\n  draw as drawSnake,\n  getSnakeHead,\n  isIntersected,\n} from './snake';\nimport { update as updateFood, draw as drawFood } from './food';\nimport { isOutsideGrid } from './grid';\nimport { strict } from 'assert';\n\nlet lastRenderTime = 0;\nlet gameOver = false;\nconst gameBoard: HTMLDivElement = document.querySelector('#game-board');\n\nconst main = (currentTime: number) => {\n  if (gameOver) {\n    if (confirm('You lost. Press Ok to restart.')) {\n      window.location.href = '/';\n    }\n    return;\n  }\n\n  window.requestAnimationFrame(main);\n  const secondsSinceLastRender = (currentTime - lastRenderTime) / 1000;\n  if (secondsSinceLastRender < 1 / SNAKE_SPEED) return;\n\n  lastRenderTime = currentTime;\n\n  update();\n  draw();\n};\n\nwindow.requestAnimationFrame(main);\n\nconst update = () => {\n  updateSnake();\n  updateFood();\n  checkDeath();\n};\n\nconst draw = () => {\n  gameBoard.innerHTML = '';\n  drawSnake(gameBoard);\n  drawFood(gameBoard);\n};\n\nconst checkDeath = () => {\n  gameOver = isOutsideGrid(getSnakeHead()) || isIntersected();\n};\n"]}